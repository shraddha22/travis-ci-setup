<!--
# Copyright 2011 Red Hat Inc.
#
# This file is part of solenopsis
#
# solenopsis is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
-->

<project name="SolenopsisBuild" basedir="." xmlns:sf="antlib:com.salesforce" xmlns:ac="http://ant-contrib.sourceforge.net" xmlns:rh-util="http://www.redhat.com/util" xmlns:rh-sfdc="http://www.redhat.com/sfdc">

    <!-- =========================================================================================== -->

	<import file="solenopsis-setup.xml"/>
	<import file="util/rh-util.xml"/>
	<import file="util/sfdc-util.xml"/>

    <!-- =========================================================================================== -->

    <target name="help">
        <echo>
================================
= Solenopsis SFDC Utility Tool =
================================

       Targets
	   -------

Generate a (non folder based) package.xml based off the master environment.  If no sf.packageDir is specified, defaults to current working dir:
	ant [-Dsf.packageDir="directory to generate package.xml"] [-Dsf.version="version to generate"] -f ${ant.file} generate-package

Generate a complete (folder based) package.xml based off the master environment.  If no sf.packageDir is specified, defaults to current working dir:
	ant [-Dsf.packageDir="directory to generate package.xml"] [-Dsf.version="version to generate"] -f ${ant.file} generate-full-package

Push git related changes from the master environment to the dependent environment (any files removed from git are removed from the dependent env):
    ant -f ${ant.file} git-destructive-push

Push git related changes from the master environment to the dependent environment:
    ant -f ${ant.file} git-push

Manually push files from the master env (please ensure the property sf.files2push is set containing dir/file names):
    ant -f ${ant.file} file-push
	ant -Dsf.files2push="dir1/file1 dir2/file2" ${ant.file} push-files

Manually remove/push files from the master env (please ensure the property sf.files2push and sf.files2remove are set containing dir/file names):
    ant -f ${ant.file} file-destructive-push
	ant -Dsf.files2remove="dir1/file1 dir2/file2" -Dsf.files2push="dir3/file3 dir4/file4" ${ant.file} file-destructive-push

Additive deployment from master environment to dependent environment:
    ant -f ${ant.file} push

Destructive deployment from master environment to dependent environment:
	ant -f ${ant.file} destructive-push

Describe the differences between master environment and dependent environment:
    ant -f ${ant.file} report-diff

Grab complete contents (folder based) from a dependent environment:
    ant -f ${ant.file} pull-full

Grab complete contents (folder based) from a dependent environment to the master:
    ant -f ${ant.file} pull-full-to-master

Grab contents (non folder based) from a dependent environment:
    ant -f ${ant.file} pull

Grab contents (non folder based) from a dependent environment:
    ant -f ${ant.file} pull-to-master

Selectively pull from a dependent environment
	ant -f ${ant.file} selective-pull

Selectively pull from a dependent environment to master
	ant -f ${ant.file} selective-pull-to-master

Remove all references found in the sfdcignore file from appropriate files (permissionsets and profiles)
    ant -f ${ant.file} remove-ignore-refs

Clean the ignore file of things like trailing spaces
    ant -f ${ant.file} -Dsf.ignoreFile=dir/ignorefile clean-ignore-file

Run all tests in a dependent environment without deploying first:
    ant -f ${ant.file} run-tests

Display the test classes for the master environment:
	ant -f ${ant.file} display-test-classes

Generate CSVs for objects from the master environment:
    ant -f ${ant.file} generate-objects-csv

Generate a CSV of diffs for objects between the master and dependent environment:
    ant -f ${ant.file} generate-objects-diff-csv

Describe all metadata:
    ant -f ${ant.file} describe-metadata

List metadata (please ensure the property sf.metadataTypes is set - it can be a colon delimited collection):
    ant -Dsf.metadataTypes="metadata type(s)" -f ${ant.file} list-metadata

Display the known environments:
    ant -f ${ant.file} envs

Display all values that will be used for all environments - this will take into account those set in the credentials file and where appropriate what's in defaulted in solenopsis.properties:
    ant -f ${ant.file} env-values

Verify dependent credentials (***TBD***):
    ant -f ${ant.file} verify-credentials

Verify all credentials (***TBD***):
    ant -f ${ant.file} verify-all-credentials

For a list of targets:
    ant -f ${ant.file} -projecthelp


	   Environment
	   -----------

sf.env                  ${sf.env}    

solenopsis.HOME:        ${solenopsis.HOME}
solenopsis.lib.HOME:    ${solenopsis.lib.HOME}
solenopsis.props.HOME:  ${solenopsis.props.HOME}
solenopsis.util.HOME:   ${solenopsis.util.HOME}
solenopsis.xsl.HOME:    ${solenopsis.xsl.HOME}
solenopsis.temp.DIR:    ${solenopsis.temp.DIR}

Master:                 ${solenopsis.env.MASTER}
Dependent:              ${solenopsis.env.DEPENDENT}

Defined:                ${solenopsis.ENVIRONMENTS}


       Properties
	   ----------

Master environment:      solenopsis.env.MASTER
Dependent environment:   solenopsis.env.DEPENDENT

Environment source dir:  solenopsis.env.[dir name].HOME


Example:
    solenopsis.env.MASTER   = foo
    solenopsis.env.foo.HOME = /tmp/alpha/beta

    The master environment is known as "foo" and its source is located in
    /tmp/alpha/beta

        </echo>
    </target>

	<target name="info" description="Emit info about solenopsis">
		<echo>
Solenopsis release version  [${solenopsis.release.VERSION}]
Solenopsis version          [${solenopsis.VERSION}]

Ant version                 [${ant.version}]
Java version                [${ant.java.version}]
		</echo>
	</target>

    <!-- =========================================================================================== -->

	<target name="generate-package" depends="info" description="Generate a (non folder based) package.xml">
		<rh-sfdc:generate-package/>
	</target>

	<target name="generate-full-package" depends="info" description="Generate a complete (folder based) package.xml based off the master environment">
		<rh-sfdc:generate-full-package/>
	</target>

	<target name="git-destructive-push" depends="info" description="Pushes git changes from the master environment to the dependenent environment.  Any files removed from git are removed from the dependent env">
		<rh-sfdc:git-destructive-push/>
	</target>

	<target name="git-push" depends="info" description="Pushes git changes from the master environment to the dependenent environment">
		<rh-sfdc:git-push/>
	</target>

	<target name="file-destructive-push" depends="info" description="Destructive changes of selected files from master environment to dependent environment">
		<rh-util:ifNotSet property="sf.files2push">
			<rh-util:then>
				<rh-util:property name="sf.files2push" value=""/>
			</rh-util:then>
		</rh-util:ifNotSet>

		<rh-util:ifNotSet property="sf.files2remove">
			<rh-util:then>
				<rh-util:property name="sf.files2remove" value=""/>
			</rh-util:then>
		</rh-util:ifNotSet>

		<rh-sfdc:file-push addFileList="${sf.files2push}" removeFileList="${sf.files2remove}"/>
	</target>

	<target name="file-push" depends="info" description="Additive push of selected files from master environment to dependent environment">
		<fail unless="sf.files2push" message="Must define files to push using the property sf.files2push.  Files should be space delimited in format dir1/file1 dir2/files"/>
		<rh-sfdc:file-push addFileList="${sf.files2push}"/>
	</target>

	<target name="push" depends="info" description="Additive deployment from master environment to dependent environment">
		<rh-sfdc:push/>
	</target>

	<target name="destructive-push" depends="pull-full, report-diff" description="Destructive deployment from master environment to dependent environment">
		<!--
			As we are dependent on the target report-diff, that target actually sets the
			property entitled report-diff.REMOVE-CHANGES...
		-->
		<rh-sfdc:push destructiveChanges="${report-diff.REMOVE-CHANGES}"/>
	</target>

	<target name="cached-delta-push" depends="info" description="Using local copies of the dependent envs files, deploy to the dependent env (from the master environment) using added and modified files">
        <rh-sfdc:delta-push/> 
	</target>

    <target name="delta-push" depends="pull-full, cached-delta-push" description="First pulling all files from the dependent env, then pushing added and modified files from the master env."/>

	<target name="cached-destructive-push" depends="report-diff" description="Destructive deployment from master environment to dependent environment">
		<!--
			As we are dependent on the target report-diff, that target actually sets the
			property entitled report-diff.REMOVE-CHANGES...
		-->
		<rh-sfdc:push destructiveChanges="${report-diff.REMOVE-CHANGES}"/>
	</target>

	<target name="report-diff" depends="info" description="Describe the differences between master environment and dependent environment">
		<rh-sfdc:diff packageProperty="report-diff.ADD-CHANGES"    reportProperty="report-diff.ADD-REPORT" masterEnv="${solenopsis.env.DEPENDENT}" dependentEnv="${solenopsis.env.MASTER}" operation="Add"/>
		<rh-sfdc:diff packageProperty="report-diff.REMOVE-CHANGES" reportProperty="report-diff.REMOVE-REPORT"/>

		<echo message="===================================================================================="/>
		<echo message="${report-diff.ADD-REPORT}"/>
		<echo message="===================================================================================="/>
		<echo message="${report-diff.REMOVE-REPORT}"/>
		<echo message="===================================================================================="/>
	</target>

	<target name="selective-pull" depends="info" description="Selectively pull from a dependent environment">
		<rh-sfdc:selective-pull/>
	</target>

	<target name="selective-pull-to-master" depends="info" description="Selectively pull from a dependent environment to master">
		<rh-sfdc:selective-pull-to-master/>
	</target>

	<target name="pull-full" depends="info" description="Grab complete contents (folder based) from a dependent environment">
		<rh-sfdc:folder-pull/>
	</target>

	<target name="pull-full-to-master" depends="info" description="Grab complete contents (folder based) from a dependent environment and copy to the master environment">
		<rh-sfdc:folder-pull-to-master/>
	</target>

	<target name="pull" depends="info" description="Grab contents (non folder based) from a dependent environment">
		<rh-sfdc:non-folder-pull/>
	</target>

	<target name="pull-to-master" depends="info" description="Grab contents (non folder based) from a dependent environment to the master">
		<rh-sfdc:non-folder-pull-to-master/>
	</target>

	<target name="run-tests" depends="info" description="Request dependent env to run all its tests (no code deploy occurs)">
		<rh-sfdc:runTests/>
	</target>

	<target name="display-test-classes" depends="info" description="Display the test classes for the master environment">
		<rh-sfdc:compute-test-classes property="solenopsis.TEST_CLASSES"/>

		<echo message="Test classes = ${solenopsis.TEST_CLASSES}"/>
	</target>

	<target name="generate-objects-csv" depends="info" description="Generate CSV files from object files">
		<rh-sfdc:generate-objects-csv/>
	</target>

	<target name="generate-objects-diff-csv" depends="info" description="Generate CSV containing diffs in object files between master and dependent environments">
		<rh-sfdc:generate-objects-diff-csv/>
	</target>

	<target name="describe-metadata" depends="info" description="Describe metadata">
		<rh-sfdc:describe-metadata dependentEnv="${solenopsis.env.DEPENDENT}"/>
	</target>

	<target name="list-metadata" depends="info" description="List metadata">
		<rh-sfdc:list-metadata dependentEnv="${solenopsis.env.DEPENDENT}" types="${sf.metadataTypes}"/>
	</target>

	<target name="envs" depends="info" description="Pull standard (nonfolder based) contents from an SFDC environment.  The files pulled will be based on the directories found in ${solenopsis.env.HOME}">
		<echo>
Master:      ${solenopsis.env.MASTER}
Dependent:   ${solenopsis.env.DEPENDENT}
Defined:     ${solenopsis.ENVIRONMENTS}
		</echo>
	</target>

	<target name="env-values" depends="info" description="Display all values that will be used for all environments - this will take into account those set in the credentials file and where appropriate what's in defaulted in solenopsis.properties">
		<rh-sfdc:compute-all-env-values property="solenopsis.COMPUTE_ALL_ENV_VALUES"/>
		<echo message="${solenopsis.COMPUTE_ALL_ENV_VALUES}"/>
	</target>

	<target name="verify-credentials" depends="info" description="Verify dependent credentials">
		<fail message="TBD"/>
	</target>

	<target name="verify-all-credentials" depends="info" description="Verify all credentials">
		<fail message="TBD"/>
	</target>

    <target name="remove-ignore-refs" depends="info" description="Remove all references denoted in the sfdcignore file from appropriate files">
        <rh-sfdc:purge-ignores-refs env="${solenopsis.env.MASTER}" purgeIgnores="true"/>
    </target>

    <target name="clean-ignore-file" depends="info" description="Clean the ignore file - for example of trailing spaces">
        <rh-sfdc:clean-ignore-file/>
    </target>

    <!-- =========================================================================================== -->
</project>